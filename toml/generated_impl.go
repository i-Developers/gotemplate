// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package toml

import "github.com/coveo/gotemplate/v3/collections"

// List implementation of IGenericList for tomlList
type List = tomlList
type tomlIList = collections.IGenericList
type tomlList []interface{}

func (l tomlList) AsArray() []interface{} { return []interface{}(l) }
func (l tomlList) Cap() int               { return cap(l) }
func (l tomlList) Capacity() int          { return cap(l) }
func (l tomlList) Clone() tomlIList       { return tomlListHelper.Clone(l) }
func (l tomlList) Contains(values ...interface{}) bool {
	return tomlListHelper.Contains(l, values...)
}
func (l tomlList) Count() int                   { return len(l) }
func (l tomlList) Create(args ...int) tomlIList { return tomlListHelper.CreateList(args...) }
func (l tomlList) CreateDict(args ...int) tomlIDict {
	return tomlListHelper.CreateDictionary(args...)
}
func (l tomlList) First() interface{} { return tomlListHelper.GetIndexes(l, 0) }
func (l tomlList) Get(indexes ...int) interface{} {
	return tomlListHelper.GetIndexes(l, indexes...)
}
func (l tomlList) Has(values ...interface{}) bool    { return l.Contains(values...) }
func (l tomlList) Join(sep interface{}) str          { return l.StringArray().Join(sep) }
func (l tomlList) Last() interface{}                 { return tomlListHelper.GetIndexes(l, len(l)-1) }
func (l tomlList) Len() int                          { return len(l) }
func (l tomlList) New(args ...interface{}) tomlIList { return tomlListHelper.NewList(args...) }
func (l tomlList) Reverse() tomlIList                { return tomlListHelper.Reverse(l) }
func (l tomlList) StringArray() strArray             { return tomlListHelper.GetStringArray(l) }
func (l tomlList) Strings() []string                 { return tomlListHelper.GetStrings(l) }
func (l tomlList) TypeName() str                     { return "Toml" }
func (l tomlList) Unique() tomlIList                 { return tomlListHelper.Unique(l) }

func (l tomlList) GetHelpers() (collections.IDictionaryHelper, collections.IListHelper) {
	return tomlDictHelper, tomlListHelper
}

func (l tomlList) Append(values ...interface{}) tomlIList {
	return tomlListHelper.Add(l, false, values...)
}

func (l tomlList) Intersect(values ...interface{}) tomlIList {
	return tomlListHelper.Intersect(l, values...)
}

func (l tomlList) Pop(indexes ...int) (interface{}, tomlIList) {
	if len(indexes) == 0 {
		indexes = []int{len(l) - 1}
	}
	return l.Get(indexes...), l.Remove(indexes...)
}

func (l tomlList) Prepend(values ...interface{}) tomlIList {
	return tomlListHelper.Add(l, true, values...)
}

func (l tomlList) Remove(indexes ...int) tomlIList {
	return tomlListHelper.Remove(l, indexes...)
}

func (l tomlList) Set(i int, v interface{}) (tomlIList, error) {
	return tomlListHelper.SetIndex(l, i, v)
}

func (l tomlList) Union(values ...interface{}) tomlIList {
	return tomlListHelper.Add(l, false, values...).Unique()
}

func (l tomlList) Without(values ...interface{}) tomlIList {
	return tomlListHelper.Without(l, values...)
}

// Dictionary implementation of IDictionary for tomlDict
type Dictionary = tomlDict
type tomlIDict = collections.IDictionary
type tomlDict map[string]interface{}

func (d tomlDict) Add(key, v interface{}) tomlIDict    { return tomlDictHelper.Add(d, key, v) }
func (d tomlDict) AsMap() map[string]interface{}       { return (map[string]interface{})(d) }
func (d tomlDict) Clone(keys ...interface{}) tomlIDict { return tomlDictHelper.Clone(d, keys) }
func (d tomlDict) Count() int                          { return len(d) }
func (d tomlDict) Create(args ...int) tomlIDict        { return tomlListHelper.CreateDictionary(args...) }
func (d tomlDict) CreateList(args ...int) tomlIList    { return tomlHelper.CreateList(args...) }
func (d tomlDict) Flush(keys ...interface{}) tomlIDict { return tomlDictHelper.Flush(d, keys) }
func (d tomlDict) Get(keys ...interface{}) interface{} { return tomlDictHelper.Get(d, keys) }
func (d tomlDict) GetKeys() tomlIList                  { return tomlDictHelper.GetKeys(d) }
func (d tomlDict) GetValues() tomlIList                { return tomlDictHelper.GetValues(d) }
func (d tomlDict) Has(keys ...interface{}) bool        { return tomlDictHelper.Has(d, keys) }
func (d tomlDict) KeysAsString() strArray              { return tomlDictHelper.KeysAsString(d) }
func (d tomlDict) Len() int                            { return len(d) }
func (d tomlDict) Native() interface{}                 { return collections.ToNativeRepresentation(d) }
func (d tomlDict) Pop(keys ...interface{}) interface{} { return tomlDictHelper.Pop(d, keys) }
func (d tomlDict) Set(key, v interface{}) tomlIDict    { return tomlDictHelper.Set(d, key, v) }
func (d tomlDict) Transpose() tomlIDict                { return tomlDictHelper.Transpose(d) }
func (d tomlDict) TypeName() str                       { return "Toml" }

func (d tomlDict) GetHelpers() (collections.IDictionaryHelper, collections.IListHelper) {
	return tomlDictHelper, tomlListHelper
}

func (d tomlDict) Default(key, defVal interface{}) interface{} {
	return tomlDictHelper.Default(d, key, defVal)
}

func (d tomlDict) Delete(key interface{}, otherKeys ...interface{}) (tomlIDict, error) {
	return tomlDictHelper.Delete(d, append([]interface{}{key}, otherKeys...))
}

func (d tomlDict) Merge(dict tomlIDict, otherDicts ...tomlIDict) tomlIDict {
	return tomlDictHelper.Merge(d, append([]tomlIDict{dict}, otherDicts...))
}

func (d tomlDict) Omit(key interface{}, otherKeys ...interface{}) tomlIDict {
	return tomlDictHelper.Omit(d, append([]interface{}{key}, otherKeys...))
}

// Generic helpers to simplify physical implementation
func tomlListConvert(list tomlIList) tomlIList { return tomlList(list.AsArray()) }
func tomlDictConvert(dict tomlIDict) tomlIDict { return tomlDict(dict.AsMap()) }
func needConversion(object interface{}, strict bool) bool {
	return needConversionImpl(object, strict, "Toml")
}

var tomlHelper = helperBase{ConvertList: tomlListConvert, ConvertDict: tomlDictConvert, NeedConversion: needConversion}
var tomlListHelper = helperList{BaseHelper: tomlHelper}
var tomlDictHelper = helperDict{BaseHelper: tomlHelper}

// DictionaryHelper gives public access to the basic dictionary functions
var DictionaryHelper collections.IDictionaryHelper = tomlDictHelper

// GenericListHelper gives public access to the basic list functions
var GenericListHelper collections.IListHelper = tomlListHelper

type (
	str      = collections.String
	strArray = collections.StringArray
)

var iif = collections.IIf
